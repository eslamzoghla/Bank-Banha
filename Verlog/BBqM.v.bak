module BBqM(CLK,reset,enter_queue,leave_queue,tcount,full_led,empty_led,alarm,Segement1,Segement2,Segement3);
  // -------------------------- Inputs Declarations ---------------------------- //
  input CLK,reset,enter_queue,leave_queue;
  input [1:0]tcount;
  
  // -------------------------- Outputs Declarations ---------------------------- //
  output full_led,empty_led,alarm;
  output [6:0]Segement1;
  output [6:0]Segement2;
  output [6:0]Segement3;
  
  // -------------------------- Wires Declarations ---------------------------- //
  wire CLK10ms;
  wire Up_flip_flop;
  wire Down_flip_flop;
  wire full_led,empty_led,alarm;
  wire enter_queue,leave_queue;
  wire [3:0] pcount;
  wire [4:0]wtime;
  
  // ------------------------- Instantiation Modules --------------------------- //
  
  // ------------------------- Instantiation From Clock Divder --------------------------- //
  clock_divider clk_div(CLK,reset,CLK10ms);
  
  // ------------------------- Instantiation From Flip Flop --------------------------- //
  flip_flop upflip(reset,enter_queue,CLK10ms,Up_flip_flop);
  flip_flop downflip(reset,leave_queue,CLK10ms,Down_flip_flop);
  
  // ------------------------- Instantiation From Up Down Counter --------------------------- // 
  UpDownCounter_FSM updowncount(CLK10ms,Up_flip_flop,Down_flip_flop,reset,pcount);

  // ------------------------- Instantiation From Flags --------------------------- //
  Flags led_flag(CLK10ms,reset,Up_flip_flop,Down_flip_flop,pcount,full_led,empty_led,alarm);
  
  // ------------------------- Instantiation From Rom --------------------------- //
  Rom rom(.addr({tcount,pcount[2:0]}),.wtime(wtime));
  
  // ------------------------- Instantiation From Display module --------------------------- //
  Display(pcount,wtime,Segement1,Segement2,Segement3);
  
endmodule
// ----------------------------- End of File --------------------------------- //
// --------------------------------------------------------------------------- //

/*`timescale 1ns/100ps
module Testbench2();
  wire f,e;  //under observation
  wire [6:0] pc;
  wire [6:0] wt1;
  wire [6:0] wt2;
  wire alarm;
  reg  a,b,rst;    //inputs to DUT
  wire [1:0] tc;
  reg i;
  reg [2:0] initial_state;
   assign tc=2;  //two tellers
   //top DUT1(.A(a),.B(b),.reset(rst),.wtime(wt),.pcount(pc),.tcount(tc),.full(f),.empty(e));
   BBqM updown(CLK,reset,b,a,tc,f,e,alarm,pc,wt1,wt2);
initial
  begin
    
    //case1 : initial///////////////////////////////////////////////////////
    initial_state = {3*(1'b0)};  //case1 : initial
    b = 1'b1;
    a = 1'b1;
    rst=0;
    $display("initially  pcount = %b",pc);
    $display("initially  wtime = %b",wt);
    $display("Full flag = %d", f);
    $display("Empty flag = %d", e);
    #10
    b = 1'b0;  #5  b=1'b1 ;  //someone enters 
    #5 a=1'b0;               //arrrives at the tellers
    $display("Pcount = %d", pc);
    $display("Full flag = %d", f);
    $display("wtime = %b",wt);
    $display("Empty flag = %d", e);
    #10
    b = 1'b0; #5 b=1'b1 ;        //another one enters
    #5
    $display("Pcount = %d", pc);
    $display("Full flag = %d", f);
    $display("wtime = %b",wt);
    $display("Empty flag = %d", e);
    #10            
    //case2 : trying to under flow//////////////////////////////////////////////////////////
    rst=1'b1; a=1'b0; #10 rst=1'b0 ; //resetting the DUT
    
    $display("Pcount = %d", pc);
    $display("Full flag = %d", f);
    $display("wtime = %b",wt);
    $display("Empty flag = %d", e);
    
    #10
    a = 1'b1; #5 a=1'b0 ; // as if someone tries to exit the qeue (underflow)
    $display("Pcount = %d", pc);
    $display("Full flag = %d", f);
    $display("wtime = %b",wt);
    $display("Empty flag = %d", e);
    #10 rst=1'b1; a=1'b1; #10 rst=1'b0 ; //resetting the DUT
    
    //case3: trying to overflow////////////////////////////////////////////////////////////////
    //the DUT is reset now at a state of pcount=00000
    //we will try to fill it then attempt to over flow it
    #5 
    a=1'b0;
    for(i=1;i<=(2*3);i=i+1)
      begin #5 b=1'b0; #5 b=1'b1 ; end
    //the qeue should be full by now
    $display("Pcount = %d", pc);
    $display("Full flag = %d", f);
    $display("wtime = %b",wt);
    $display("Empty flag = %d", e);
    //attempting to overflow
    #5 b=1'b0; #5 b=1'b1;
    $display("Pcount = %d", pc);
    $display("Full flag = %d", f);
    $display("wtime = %b",wt);
    $display("Empty flag = %d", e); 
  end  
endmodule*/